package dice;
import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.*;
import java.util.List;

public class ProbabilityExperimentsGUI extends JFrame {
    private static final long serialVersionUID = 1L;

    private JPanel diePanel;
    private JPanel cardPanel;
    private JLabel dieLabel;
    private JLabel cardLabel;
    private JTextArea resultArea;

    public ProbabilityExperimentsGUI() {
        setTitle("Probability Experiments");
        setSize(600, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Create panels
        JPanel topPanel = new JPanel(new GridLayout(1, 2, 10, 10));
        topPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        diePanel = new JPanel(new BorderLayout());
        cardPanel = new JPanel(new BorderLayout());
        topPanel.add(diePanel);
        topPanel.add(cardPanel);

        // Die rolling components
        dieLabel = new JLabel(new ImageIcon(createDieImage(1)));
        JButton rollButton = new JButton("Roll Die");
        diePanel.add(dieLabel, BorderLayout.CENTER);
        diePanel.add(rollButton, BorderLayout.SOUTH);

        // Card drawing components
        cardLabel = new JLabel(new ImageIcon(createCardImage("A", "♠")));
        JButton drawButton = new JButton("Draw Card");
        cardPanel.add(cardLabel, BorderLayout.CENTER);
        cardPanel.add(drawButton, BorderLayout.SOUTH);

        // Result area
        resultArea = new JTextArea(10, 50);
        resultArea.setEditable(false);
        resultArea.setFont(new Font("SansSerif", Font.PLAIN, 14));
        JScrollPane scrollPane = new JScrollPane(resultArea);
        scrollPane.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // Add components to frame
        add(topPanel, BorderLayout.NORTH);
        add(scrollPane, BorderLayout.CENTER);

        // Add action listeners
        rollButton.addActionListener(e -> rollDie());
        drawButton.addActionListener(e -> drawCard());

        setVisible(true);
    }

    private void rollDie() {
        int result = (int) (Math.random() * 6) + 1;
        dieLabel.setIcon(new ImageIcon(createDieImage(result)));
        updateResultArea("Rolled a " + result);
        calculateDieProbabilities();
    }

    private void drawCard() {
        String[] suits = {"♠", "♥", "♦", "♣"};
        String[] ranks = {"A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"};
        String rank = ranks[(int) (Math.random() * ranks.length)];
        String suit = suits[(int) (Math.random() * suits.length)];
        cardLabel.setIcon(new ImageIcon(createCardImage(rank, suit)));
        updateResultArea("Drew " + rank + suit);
        calculateCardProbabilities();
    }

    private Image createDieImage(int value) {
        BufferedImage image = new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = image.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        // Draw die background
        g2d.setColor(Color.WHITE);
        g2d.fillRoundRect(0, 0, 99, 99, 20, 20);
        g2d.setColor(Color.BLACK);
        g2d.drawRoundRect(0, 0, 99, 99, 20, 20);

        // Draw dots
        g2d.setColor(Color.BLACK);
        int[][][] dotPositions = {
            {}, // 0 (not used)
            {{50, 50}},
            {{25, 25}, {75, 75}},
            {{25, 25}, {50, 50}, {75, 75}},
            {{25, 25}, {25, 75}, {75, 25}, {75, 75}},
            {{25, 25}, {25, 75}, {50, 50}, {75, 25}, {75, 75}},
            {{25, 25}, {25, 50}, {25, 75}, {75, 25}, {75, 50}, {75, 75}}
        };

        for (int[] pos : dotPositions[value]) {
            g2d.fillOval(pos[0] - 7, pos[1] - 7, 14, 14);
        }

        g2d.dispose();
        return image;
    }

    private Image createCardImage(String rank, String suit) {
        BufferedImage image = new BufferedImage(100, 140, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = image.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        // Draw card background
        g2d.setColor(Color.WHITE);
        g2d.fillRoundRect(0, 0, 99, 139, 10, 10);
        g2d.setColor(Color.BLACK);
        g2d.drawRoundRect(0, 0, 99, 139, 10, 10);

        // Set color based on suit
        Color suitColor = (suit.equals("♥") || suit.equals("♦")) ? Color.RED : Color.BLACK;
        g2d.setColor(suitColor);

        // Draw rank and suit
        g2d.setFont(new Font("SansSerif", Font.BOLD, 20));
        g2d.drawString(rank, 10, 30);
        g2d.drawString(suit, 10, 55);

        // Draw larger suit in the center
        g2d.setFont(new Font("SansSerif", Font.BOLD, 50));
        FontMetrics fm = g2d.getFontMetrics();
        int x = (100 - fm.stringWidth(suit)) / 2;
        int y = (140 - fm.getHeight()) / 2 + fm.getAscent();
        g2d.drawString(suit, x, y);

        g2d.dispose();
        return image;
    }

    private void updateResultArea(String text) {
        resultArea.append(text + "\n");
        resultArea.setCaretPosition(resultArea.getDocument().getLength());
    }

    private void calculateDieProbabilities() {
        int[] sampleSpace = {1, 2, 3, 4, 5, 6};
        updateResultArea("Probability of rolling an even number: " + 
                         calculateProbability(sampleSpace, x -> x % 2 == 0));
        updateResultArea("Probability of rolling a number greater than 4: " + 
                         calculateProbability(sampleSpace, x -> x > 4));
        updateResultArea("Probability of rolling a 3: " + 
                         calculateProbability(sampleSpace, x -> x == 3));
        updateResultArea("");
    }

    private void calculateCardProbabilities() {
        String[] suits = {"♠", "♥", "♦", "♣"};
        String[] ranks = {"A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"};
        List<String> deck = new ArrayList<>();
        for (String suit : suits) {
            for (String rank : ranks) {
                deck.add(rank + suit);
            }
        }
        updateResultArea("Probability of drawing a heart: " + 
                         calculateProbability(deck, card -> card.contains("♥")));
        updateResultArea("Probability of drawing a face card: " + 
                         calculateProbability(deck, card -> card.contains("J") || card.contains("Q") || card.contains("K")));
        updateResultArea("Probability of drawing the Ace of Spades: " + 
                         calculateProbability(deck, "A♠"::equals));
        updateResultArea("");
    }

    private static <T> double calculateProbability(T[] sampleSpace, java.util.function.Predicate<T> condition) {
        long favorableOutcomes = Arrays.stream(sampleSpace).filter(condition).count();
        return (double) favorableOutcomes / sampleSpace.length;
    }

    private static double calculateProbability(int[] sampleSpace, java.util.function.IntPredicate condition) {
        long favorableOutcomes = Arrays.stream(sampleSpace).filter(condition).count();
        return (double) favorableOutcomes / sampleSpace.length;
    }

    private static <T> double calculateProbability(List<T> sampleSpace, java.util.function.Predicate<T> condition) {
        long favorableOutcomes = sampleSpace.stream().filter(condition).count();
        return (double) favorableOutcomes / sampleSpace.size();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(ProbabilityExperimentsGUI::new);
    }
}